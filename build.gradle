buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.4.7'
    }
}



allprojects {
    repositories {
        mavenLocal(  )
    }
    group 'org.hibernate.benchmarks.orm.hql'
    version '1.0.0-SNAPSHOT'
}

apply from: rootProject.file( 'gradle/java-module.gradle' )

apply plugin: "me.champeau.gradle.jmh"


ext {
    ormVersion = 'orm6'
    hibernateVersion = '6.0.0-SNAPSHOT'

    if ( project.hasProperty( 'orm5' ) ) {
        ormVersion = 'orm5'
        if ( orm5?.trim() ) {
            hibernateVersion = orm5
        }
        else {
            hibernateVersion = '5.3.7.Final'
        }

    }
    else if ( project.hasProperty( 'alpha1' ) ) {
        ormVersion = 'alpha1'
        hibernateVersion = '6.0.0.Alpha1'
    }
    else if ( project.hasProperty( 'alpha2' ) ) {
        ormVersion = 'orm6'
        hibernateVersion = '6.0.0.Alpha2'
    }
    else if ( project.hasProperty( 'orm6' ) ) {
        if ( orm6?.trim() ) {
            hibernateVersion = orm6
        }
    }
}

dependencies {
    compile 'org.openjdk.jmh:jmh-core:1.21'
    compile project( ':hql-benchmark-common' )

    compile 'javax.persistence:javax.persistence-api:2.2'

    runtime libraries.h2
    
}

afterEvaluate {
    dependencies {
        if ( ormVersion == 'orm5' ) {
            runtime project( ':hql-benchmark-orm5' )
        }
        else if ( ormVersion == 'alpha1' ) {
            runtime project( ':hql-benchmark-orm6-alpha1' )
        }
        else {
            runtime project( ':hql-benchmark-orm6' )
        }
    }
}

jmh {
    // for available options, see https://github.com/melix/jmh-gradle-plugin/blob/master/README.adoc#configuration-options
    exclude = ['EndToEndBenchmarkTests']
    benchmarkMode = ['avgt']

    iterations = 20 //default 10
    fork = 2 //default 10
    warmupIterations = 20 // Number of warmup iterations to do.

    def formattedDate = new Date().format( 'yyyy-MM-dd-HHmmss' )

    humanOutputFile = project.file( "${buildDir}/reports/jmh/${ormVersion}/human_${hibernateVersion}_${formattedDate}.txt" )
    resultsFile = project.file( "${buildDir}/reports/jmh/${ormVersion}/results_${hibernateVersion}_${formattedDate}.txt" )
}
